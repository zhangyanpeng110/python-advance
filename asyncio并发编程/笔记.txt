
asyncio是单线程的，并且内部并没有使用锁
    1.包含各种特定系统实现的模块化事件循环
    2.传输和协议抽象
    3.对TCP、UDP、SSL、子进程、调用


异步编程的解决方案，可用于协程、线程、进程


future:
    可以认为是一个结果容器

task在协程中的设计：
    协程中的桥梁，协程是开发者定义的，自定义调度的一个函数，它的启动需要开发者自己开启
    task的出现就是解决这个问题，task是future的子类，task内部在init中 self._loop.call_soon(self._step)
    加载的时候调用了内部定义的 def _step() 方法 以及在该方法内自动向协程 调用了 send(None) 方法启动了协程





