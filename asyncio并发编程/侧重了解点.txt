001
	创建 task 任务
    def create_task(self, coro):
        raise NotImplementedError

002
	获取事件循环
	events.get_event_loop()
	def get_event_loop():
		"""Return an asyncio event loop.

		When called from a coroutine or a callback (e.g. scheduled with call_soon
		or similar API), this function will always return the running event loop.

		If there is no running event loop set, the function will return
		the result of `get_event_loop_policy().get_event_loop()` call.
		"""
		current_loop = _get_running_loop()
		if current_loop is not None:
			return current_loop
		return get_event_loop_policy().get_event_loop()

003
	实际上还是检查有没有 loop 事件循环，没有则获取一个并且通过它创建一个 task
	所以实际上直接使用 create_task 没有本质区别
	def ensure_future(coro_or_future, *, loop=None):
		"""Wrap a coroutine or an awaitable in a future.

		If the argument is a Future, it is returned directly.
		"""
		if futures.isfuture(coro_or_future):
			if loop is not None and loop is not coro_or_future._loop:
				raise ValueError('loop argument must agree with Future')
			return coro_or_future
		elif coroutines.iscoroutine(coro_or_future):
			if loop is None:
				loop = events.get_event_loop()
			task = loop.create_task(coro_or_future)
			if task._source_traceback:
				del task._source_traceback[-1]
			return task
		elif compat.PY35 and inspect.isawaitable(coro_or_future):
			return ensure_future(_wrap_awaitable(coro_or_future), loop=loop)
		else:
			raise TypeError('An asyncio.Future, a coroutine or an awaitable is '
							'required')
		
004 
	future.remove_done_callback(_run_until_complete_cb)
	
	def _run_until_complete_cb(fut):
    exc = fut._exception
    if (isinstance(exc, BaseException)
    and not isinstance(exc, Exception)):
        # Issue #22429: run_forever() already finished, no need to
        # stop it.
        return
    fut._loop.stop()
	事件循环结束之后，自动停止 loop <<<===>>> fut._loop.stop()
	
	def run_until_complete(self, future):
        """Run until the Future is done.

        If the argument is a coroutine, it is wrapped in a Task.

        WARNING: It would be disastrous to call run_until_complete()
        with the same coroutine twice -- it would wrap it in two
        different Tasks and that can't be good.

        Return the Future's result, or raise its exception.
        """
        self._check_closed()

        new_task = not futures.isfuture(future)
        future = tasks.ensure_future(future, loop=self)
        if new_task:
            # An exception is raised if the future didn't complete, so there
            # is no need to log the "destroy pending task" message
            future._log_destroy_pending = False

        future.add_done_callback(_run_until_complete_cb)
        try:
            self.run_forever()
        except:
            if new_task and future.done() and not future.cancelled():
                # The coroutine raised a BaseException. Consume the exception
                # to not log a warning, the caller doesn't have access to the
                # local task.
                future.exception()
            raise
        finally:
            future.remove_done_callback(_run_until_complete_cb)
        if not future.done():
            raise RuntimeError('Event loop stopped before Future completed.')

        return future.result()

005
	

	def run_forever(self):
        """Run until stop() is called."""
        self._check_closed()
        if self.is_running():
            raise RuntimeError('This event loop is already running')
        if events._get_running_loop() is not None:
            raise RuntimeError(
                'Cannot run the event loop while another loop is running')
        self._set_coroutine_wrapper(self._debug)
        self._thread_id = threading.get_ident()
        if self._asyncgens is not None:
            old_agen_hooks = sys.get_asyncgen_hooks()
            sys.set_asyncgen_hooks(firstiter=self._asyncgen_firstiter_hook,
                                   finalizer=self._asyncgen_finalizer_hook)
        try:
            events._set_running_loop(self)
            while True:
                self._run_once()
                if self._stopping:
                    break
        finally:
            self._stopping = False
            self._thread_id = None
            events._set_running_loop(None)
            self._set_coroutine_wrapper(False)
            if self._asyncgens is not None:
                sys.set_asyncgen_hooks(*old_agen_hooks)

	关注代码：						
		if events._get_running_loop() is not None:
		raise RuntimeError(
			'Cannot run the event loop while another loop is running')














